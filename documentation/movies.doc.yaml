components:
  schemas:
    movie:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        year:
          type: integer
        poster_path:
          type: string
        cast:
          type: array
          items:
            actor:
              type: string
        genres_ids:
          type: array
          items:
            type: integer
        overview:
          type: string
      example:
        id: 605b6485f0f9462918e51952
        title: Interstellar
        year: 2013
        cast: [Matthew McConaughey, Anne Hathaway, Jessica Chastain]
        poster_path: https://aslasfpgsdjlksdjglkfgl.asdlkjasdl
        genres_ids: [1, 5]

    movieNotFoundError:
      type: object
      properties:
        message:
          type: string
          example: "movie not found"

    movieNotFoundError2:
      type: object
      properties:
        message:
          type: string
      example: "movie not found"

tags:
  name: movies
  description: The movies managing API

paths:
  /movies:
    get:
      summary: Returns the list of all movies
      tags: [movies]
      responses:
        200:
          description: the list of the movies
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/movie"

  /movies/{id}:
    get:
      summary: Get the movie by id
      tags: [movies]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the movie id
      responses:
        200:
          description: the movie description by id
          contents:
            application/json:
              schema:
                $ref: "#/components/schemas/movie"
        404:
          description: the movie was not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schema/movieNotFoundError"

  /movies/search/title?title={queryTitle}:
    get:
      summary: search a movie by title
      tags: [movies]
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: title of the film
          example: padrino
      responses:
        200:
          description: a list of movies
          content:
            application/json:
              type: array
              items:
                schema:
                  $ref: "#/components/schemas/movie"
